{"version":3,"file":"rx-storage-instance-dexie.js","names":["Subject","now","ensureNotFalsy","attachmentObjectId","closeDexieDb","fromStorageToDexie","getDexieDbWithTables","getDocsInDb","RX_STORAGE_NAME_DEXIE","dexieCount","dexieQuery","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","flatCloneDocWithMeta","addRxStorageMultiInstanceSupport","newRxError","instanceId","DEXIE_TEST_META_FIELD","RxStorageInstanceDexie","storage","databaseName","collectionName","schema","internals","options","settings","devMode","changes$","primaryPath","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ensureNotClosed","forEach","row","document","_rev","previous","args","_meta","console","dir","Error","state","ret","success","error","map","doc","documentKeys","writeRow","categorized","dexieDb","transaction","dexieTable","dexieAttachmentsTable","docsInDbMap","Map","docsInDbWithInternals","docWithDexieInternals","set","errors","bulkPutDocs","bulkInsertDocs","push","bulkUpdateDocs","d","booleanIndexes","length","bulkPut","putAttachments","attachmentsAdd","attachment","id","documentId","attachmentId","data","attachmentData","attachmentsUpdate","bulkDelete","attachmentsRemove","eventBulk","events","lastState","newestRow","checkpoint","lwt","endTime","next","findDocumentsById","ids","deleted","docsInDb","documentInDb","_deleted","query","preparedQuery","count","queryPlan","selectorSatisfiedByIndex","result","mode","documents","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","toRemove","where","below","toArray","removeIds","getAttachmentData","_digest","get","remove","clear","close","closed","complete","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","instance","Promise","resolve"],"sources":["../../../../src/plugins/storage-dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray,\n    ensureNotFalsy,\n    randomCouchString\n} from '../utils/index.ts';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    CategorizeBulkWriteRowsOutput,\n    RxStorageCountResult,\n    PreparedQuery\n} from '../../types/index.d.ts';\nimport type {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie.d.ts';\nimport { RxStorageDexie } from './rx-storage-dexie.ts';\nimport {\n    attachmentObjectId,\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper.ts';\nimport { dexieCount, dexieQuery } from './dexie-query.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { categorizeBulkWriteRows, flatCloneDocWithMeta } from '../../rx-storage-helper.ts';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance.ts';\nimport { newRxError } from '../../rx-error.ts';\n\nlet instanceId = now();\nexport const DEXIE_TEST_META_FIELD = 'dexieTestMetaField';\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed?: Promise<void>;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings,\n        public readonly devMode: boolean\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n\n\n        /**\n         * Check some assumptions to ensure RxDB\n         * does not call the storage with an invalid write.\n         */\n        documentWrites.forEach(row => {\n            // ensure revision is set\n            if (\n                !row.document._rev ||\n                (\n                    row.previous &&\n                    !row.previous._rev\n                )\n            ) {\n                throw newRxError('SNH', { args: { row } });\n            }\n\n            // ensure prev-data is set\n            if (this.devMode) {\n                if (\n                    row.previous &&\n                    (\n                        !row.previous._meta[DEXIE_TEST_META_FIELD] ||\n                        row.previous._meta[DEXIE_TEST_META_FIELD] !== row.previous._rev\n                    )\n                ) {\n                    console.dir(row);\n                    throw new Error('missing or wrong _meta.' + DEXIE_TEST_META_FIELD);\n                }\n            }\n        });\n\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        /**\n         * Some storages might add any _meta fields\n         * internally. To ensure RxDB can work with that in the\n         * test suite, we add a random field here.\n         * To ensure \n         */\n        if (this.devMode) {\n            documentWrites = documentWrites.map(row => {\n                const doc = flatCloneDocWithMeta(row.document);\n                doc._meta[DEXIE_TEST_META_FIELD] = doc._rev;\n                return {\n                    previous: row.previous,\n                    document: doc\n                }\n            })\n        }\n\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieAttachmentsTable,\n            async () => {\n                const docsInDbMap = new Map<string, RxDocumentData<RxDocType>>();\n                const docsInDbWithInternals = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDbWithInternals.forEach(docWithDexieInternals => {\n                    const doc = docWithDexieInternals;\n                    if (doc) {\n                        docsInDbMap.set((doc as any)[this.primaryPath], doc as any);\n                    }\n                    return doc;\n                });\n\n                categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDbMap,\n                    documentWrites,\n                    context\n                );\n                ret.error = categorized.errors;\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                let bulkPutDocs: any[] = [];\n                categorized.bulkInsertDocs.forEach(row => {\n                    ret.success.push(row.document);\n                    bulkPutDocs.push(row.document);\n                });\n                categorized.bulkUpdateDocs.forEach(row => {\n                    ret.success.push(row.document);\n                    bulkPutDocs.push(row.document);\n                });\n                bulkPutDocs = bulkPutDocs.map(d => fromStorageToDexie(state.booleanIndexes, d));\n                if (bulkPutDocs.length > 0) {\n                    await state.dexieTable.bulkPut(bulkPutDocs);\n                }\n\n                // handle attachments\n                const putAttachments: { id: string, data: string }[] = [];\n                categorized.attachmentsAdd.forEach(attachment => {\n                    putAttachments.push({\n                        id: attachmentObjectId(attachment.documentId, attachment.attachmentId),\n                        data: attachment.attachmentData.data\n                    });\n                });\n                categorized.attachmentsUpdate.forEach(attachment => {\n                    putAttachments.push({\n                        id: attachmentObjectId(attachment.documentId, attachment.attachmentId),\n                        data: attachment.attachmentData.data\n                    });\n                });\n                await state.dexieAttachmentsTable.bulkPut(putAttachments);\n                await state.dexieAttachmentsTable.bulkDelete(\n                    categorized.attachmentsRemove.map(attachment => attachmentObjectId(attachment.documentId, attachment.attachmentId))\n                );\n\n            });\n\n        categorized = ensureNotFalsy(categorized);\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            categorized.eventBulk.endTime = now();\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentData<RxDocType>[] = [];\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            async () => {\n                const docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                docsInDb.forEach(documentInDb => {\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret.push(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n    async count(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        if (preparedQuery.queryPlan.selectorSatisfiedByIndex) {\n            const result = await dexieCount(this, preparedQuery);\n            return {\n                count: result,\n                mode: 'fast'\n            };\n        } else {\n            const result = await dexieQuery(this, preparedQuery);\n            return {\n                count: result.documents.length,\n                mode: 'slow'\n            };\n        }\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                /**\n                 * TODO only fetch _deleted=true\n                 */\n                const toRemove = await state.dexieTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = [];\n                toRemove.forEach(doc => {\n                    if (doc._deleted === '1') {\n                        removeIds.push(doc[this.primaryPath]);\n                    }\n                });\n                await state.dexieTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    async getAttachmentData(documentId: string, attachmentId: string, _digest: string): Promise<string> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const id = attachmentObjectId(documentId, attachmentId);\n        return await state.dexieDb.transaction(\n            'r',\n            state.dexieAttachmentsTable,\n            async () => {\n\n                const attachment = await state.dexieAttachmentsTable.get(id);\n                if (attachment) {\n                    return attachment.data;\n                } else {\n                    throw new Error('attachment missing documentId: ' + documentId + ' attachmentId: ' + attachmentId);\n                }\n            });\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieTable.clear()\n        return this.close();\n    }\n\n\n    close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            await closeDexieDb(this.internals);\n        })();\n        return this.closed;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport async function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings,\n        params.devMode\n    );\n\n    await addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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","ignoreList":[]}
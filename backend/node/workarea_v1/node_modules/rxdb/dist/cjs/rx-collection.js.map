{"version":3,"file":"rx-collection.js","names":["_rxjs","require","_index","_rxCollectionHelper","_rxQuery","_rxError","_docCache","_queryCache","_changeEventBuffer","_hooks","_rxDocumentPrototypeMerge","_rxStorageHelper","_index2","_incrementalWrite","_rxDocument","_overwritable","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","exports","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","conflictHandler","defaultConflictHandler","storageInstance","timeouts","Set","incrementalWriteQueue","_incrementalUpsertQueues","Map","synced","hooks","_subs","createQueryCache","$","checkpoint$","onDestroy","destroyed","_applyHookFunctions","asRxCollection","_proto","prototype","prepare","getWrappedStorageInstance","jsonSchema","IncrementalWriteQueue","primaryPath","newData","oldData","beforeDocumentUpdateWrite","result","_runHooks","collectionEventBulks$","eventBulks$","pipe","filter","changeEventBulk","collectionName","mergeMap","events","map","checkpoint","createChangeEventBuffer","documentConstructor","DocumentCache","cE","isLocal","docData","getRxDocumentConstructor","createNewRxDocument","databaseStorageToken","storageToken","subDocs","changeStream","subscribe","eventBulk","Array","length","rawEvents","deepFreezeWhenDevMode","overwritable","index","event","documentId","operation","documentData","previousDocumentData","id","internal","databaseToken","token","context","endTime","startTime","$emit","push","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","PROMISE_RESOLVE_VOID","cleanup","_minimumDeletedTime","pluginMissing","migrationNeeded","getMigrationState","startMigration","batchSize","migratePromise","insert","json","writeResult","bulkInsert","isError","error","throwIfIsStorageWriteError","insertResult","ensureNotFalsy","success","docsData","insertRows","hasHooks","Promise","all","useDocData","fillObjectDataBeforeInsert","document","results","bulkWrite","rxDocuments","mapDocumentsDataToCacheDocs","docsMap","forEach","row","doc","set","get","primary","bulkRemove","ids","rxDocumentMap","findByIds","exec","from","values","rxDocument","data","toMutableJSON","removeDocs","writeDoc","flatClone","_deleted","previous","successIds","d","getFromMapOrThrow","bulkUpsert","insertData","useJsonByDocId","useJson","newRxError","slice","err","status","writeData","docDataInDb","documentInDb","getCachedRxDocuments","newDoc","incrementalModify","upsert","bulkResult","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","find","queryObj","_getDefaultQuery","query","createRxQuery","findOne","isArray","newRxTypeError","selector","limit","count","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addHook","when","key","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","promiseSeries","_runHooksSync","promiseWait","time","ret","res","timeout","setTimeout","delete","add","destroy","PROMISE_RESOLVE_FALSE","clearTimeout","requestIdlePromise","fn","close","sub","unsubscribe","collections","runAsyncPluginHooks","remove","removeCollectionStorages","storage","internalStore","password","hashFunction","_createClass2","default","collection","colProto","Object","getPrototypeOf","fnName","ucfirst","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","devMode","isDevMode","runPluginHooks","createRxCollectionStorageInstance","entries","funName","defineProperty","version","creator","catch","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    map,\n    mergeMap\n} from 'rxjs';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from './plugins/utils/index.ts';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages\n} from './rx-collection-helper.ts';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query.ts';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error.ts';\nimport type {\n    RxMigrationState\n} from './plugins/migration-schema/index.ts';\nimport {\n    DocumentCache,\n    mapDocumentsDataToCacheDocs\n} from './doc-cache.ts';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache.ts';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer.ts';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks.ts';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageWriteError,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise,\n    CRDTEntry,\n    MangoQuerySelectorAndIndex,\n    MigrationStrategies\n} from './types/index.d.ts';\n\nimport {\n    RxSchema\n} from './rx-schema.ts';\n\nimport {\n    createNewRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge.ts';\nimport {\n    getWrappedStorageInstance,\n    throwIfIsStorageWriteError,\n    WrappedRxStorageInstance\n} from './rx-storage-helper.ts';\nimport { defaultConflictHandler } from './replication-protocol/index.ts';\nimport { IncrementalWriteQueue } from './incremental-write.ts';\nimport { beforeDocumentUpdateWrite } from './rx-document.ts';\nimport { overwritable } from './overwritable.ts';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any; },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any; },\n    Reactivity = any\n> {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions, Reactivity>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: MigrationStrategies = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public checkpoint$: Observable<any> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer<RxDocumentType> = {} as ChangeEventBuffer<RxDocumentType>;\n\n\n\n    /**\n     * When the collection is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed = false;\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\n            this.storageInstance,\n            this.schema.primaryPath,\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\n            result => this._runHooks('post', 'save', result)\n        );\n\n        const collectionEventBulks$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n        );\n        this.$ = collectionEventBulks$.pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this.checkpoint$ = collectionEventBulks$.pipe(\n            map(changeEventBulk => changeEventBulk.checkpoint),\n        );\n\n        this._changeEventBuffer = createChangeEventBuffer<RxDocumentType>(this.asRxCollection);\n        let documentConstructor: any;\n        this._docCache = new DocumentCache(\n            this.schema.primaryPath,\n            this.$.pipe(filter(cE => !cE.isLocal)),\n            docData => {\n                if (!documentConstructor) {\n                    documentConstructor = getRxDocumentConstructor(this.asRxCollection);\n                }\n                return createNewRxDocument(this.asRxCollection, documentConstructor, docData);\n            }\n        );\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const events = new Array(eventBulk.events.length);\n            const rawEvents = eventBulk.events;\n            const collectionName = this.name;\n            const deepFreezeWhenDevMode = overwritable.deepFreezeWhenDevMode;\n            for (let index = 0; index < rawEvents.length; index++) {\n                const event = rawEvents[index];\n                events[index] = {\n                    documentId: event.documentId,\n                    collectionName,\n                    isLocal: false,\n                    operation: event.operation,\n                    documentData: deepFreezeWhenDevMode(event.documentData) as any,\n                    previousDocumentData: deepFreezeWhenDevMode(event.previousDocumentData) as any\n                };\n            }\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events,\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context,\n                endTime: eventBulk.endTime,\n                startTime: eventBulk.startTime\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * Resolve the conflict tasks\n         * of the RxStorageInstance\n         */\n        this._subs.push(\n            this.storageInstance\n                .conflictResultionTasks()\n                .subscribe(task => {\n                    this\n                        .conflictHandler(task.input, task.context)\n                        .then(output => {\n                            this.storageInstance.resolveConflictResultionTask({\n                                id: task.id,\n                                output\n                            });\n                        });\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    /**\n     * Manually call the cleanup function of the storage.\n     * @link https://rxdb.info/cleanup.html\n     */\n    cleanup(_minimumDeletedTime?: number): Promise<boolean> {\n        throw pluginMissing('cleanup');\n    }\n\n    // overwritten by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration-schema');\n    }\n    getMigrationState(): RxMigrationState {\n        throw pluginMissing('migration-schema');\n    }\n    startMigration(batchSize: number = 10): Promise<void> {\n        return this.getMigrationState().startMigration(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getMigrationState().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const writeResult = await this.bulkInsert([json as any]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, (json as any)[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n        */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const primaryPath = this.schema.primaryPath;\n\n\n        /**\n         * This code is a bit redundant for better performance.\n         * Instead of iterating multiple times,\n         * we directly transform the input to a write-row array.\n         */\n        let insertRows: BulkWriteRow<RxDocumentType>[];\n        if (this.hasHooks('pre', 'insert')) {\n            insertRows = await Promise.all(\n                docsData.map(docData => {\n                    const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n                    return this._runHooks('pre', 'insert', useDocData)\n                        .then(() => {\n                            return { document: useDocData };\n                        });\n                })\n            );\n        } else {\n            insertRows = [];\n            for (let index = 0; index < docsData.length; index++) {\n                const docData = docsData[index];\n                const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n                insertRows[index] = { document: useDocData };\n            }\n        }\n\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n        // create documents\n        const rxDocuments = mapDocumentsDataToCacheDocs<RxDocumentType, OrmMethods>(this._docCache, results.success);\n\n        if (this.hasHooks('post', 'insert')) {\n            const docsMap: Map<string, RxDocumentType> = new Map();\n            insertRows.forEach(row => {\n                const doc = row.document;\n                docsMap.set((doc as any)[primaryPath] as any, doc);\n            });\n            await Promise.all(\n                rxDocuments.map(doc => {\n                    return this._runHooks(\n                        'post', 'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return {\n            success: rxDocuments,\n            error: results.error\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        const primaryPath = this.schema.primaryPath;\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids).exec();\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n        const successIds: string[] = results.success.map(d => d[primaryPath] as string);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments = successIds.map(id => getFromMapOrThrow(rxDocumentMap, id));\n\n        return {\n            success: rxDocuments,\n            error: results.error\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        const success = insertResult.success.slice(0);\n        const error: RxStorageWriteError<RxDocumentType>[] = [];\n\n        // update the ones that existed already\n        await Promise.all(\n            insertResult.error.map(async (err) => {\n                if (err.status !== 409) {\n                    error.push(err);\n                } else {\n                    const id = err.documentId;\n                    const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                    const docDataInDb = ensureNotFalsy(err.documentInDb);\n                    const doc = this._docCache.getCachedRxDocuments([docDataInDb])[0];\n                    const newDoc = await doc.incrementalModify(() => writeData);\n                    success.push(newDoc);\n                }\n            })\n        );\n        return {\n            error,\n            success\n        };\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    async upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const bulkResult = await this.bulkUpsert([json]);\n        throwIfIsStorageWriteError<RxDocumentType>(\n            this.asRxCollection,\n            (json as any)[this.schema.primaryPath],\n            json as any,\n            bulkResult.error[0]\n        );\n        return bulkResult.success[0];\n    }\n\n    /**\n     * upserts to a RxDocument, uses incrementalModify if document already exists\n     */\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it won't try 2 parallel runs\n        let queue = this._incrementalUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._incrementalUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[],\n        OrmMethods,\n        Reactivity\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\n    ): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods> | null,\n        OrmMethods,\n        Reactivity\n    > {\n\n        // TODO move this check to dev-mode plugin\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n\n            // cannot have limit on findOne queries because it will be overwritten\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            queryObj = flatClone(queryObj);\n            (queryObj as any).limit = 1;\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\n        }\n\n\n        return query as any;\n    }\n\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        number,\n        OrmMethods,\n        Reactivity\n    > {\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n        const query = createRxQuery('count', queryObj, this as any);\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    findByIds(\n        ids: string[]\n    ): RxQuery<\n        RxDocumentType,\n        Map<string, RxDocument<RxDocumentType, OrmMethods>>,\n        OrmMethods,\n        Reactivity\n    > {\n        const mangoQuery: MangoQuery<RxDocumentType> = {\n            selector: {\n                [this.schema.primaryPath]: {\n                    $in: ids.slice(0)\n                }\n            } as any\n        };\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\n        return query as any;\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\n        throw pluginMissing('crdt');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        /**\n         * Performance shortcut\n         * so that we not have to build the empty object.\n         */\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return false;\n        }\n\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        if (!this.hasHooks(when, key)) {\n            return;\n        }\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.destroy();\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.password,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods, any, Reactivity> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _incrementalUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.incrementalModify((_innerDoc) => {\n        return json;\n    });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\n    rxCollection: RxCollection<RxDocType>,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument<RxDocType>;\n        inserted: boolean;\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\n    if (docDataFromCache) {\n        return Promise.resolve({\n            doc: rxCollection._docCache.getCachedRxDocuments([docDataFromCache])[0],\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password,\n        devMode: overwritable.isDevMode()\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAMA,IAAAC,MAAA,GAAAD,OAAA;AAUA,IAAAE,mBAAA,GAAAF,OAAA;AAKA,IAAAG,QAAA,GAAAH,OAAA;AAIA,IAAAI,QAAA,GAAAJ,OAAA;AAOA,IAAAK,SAAA,GAAAL,OAAA;AAIA,IAAAM,WAAA,GAAAN,OAAA;AAKA,IAAAO,kBAAA,GAAAP,OAAA;AAIA,IAAAQ,MAAA,GAAAR,OAAA;AA6CA,IAAAS,yBAAA,GAAAT,OAAA;AAIA,IAAAU,gBAAA,GAAAV,OAAA;AAKA,IAAAW,OAAA,GAAAX,OAAA;AACA,IAAAY,iBAAA,GAAAZ,OAAA;AACA,IAAAa,WAAA,GAAAb,OAAA;AACA,IAAAc,aAAA,GAAAd,OAAA;AAEA,IAAMe,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,CAAU;AAE3C,IAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAU;AAElE,IAAIC,YAAY,GAAG,KAAK;AAAC,IAEZC,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA;EASzB;AACJ;AACA;;EAKI,SAAAA,iBACWE,QAAqF,EACrFC,IAAY,EACZC,MAAgC,EAChCC,uBAAwF,EACxFC,uBAAgD,GAAG,CAAC,CAAQ,EAC5DC,mBAAwC,GAAG,CAAC,CAAC,EAC7CC,OAAuB,GAAG,CAAC,CAAC,EAC5BC,WAA2B,GAAG,CAAC,CAAC,EAChCC,OAAY,GAAG,CAAC,CAAC,EACjBC,sBAAgD,GAAGC,yCAA6B,EAChFC,OAAuB,GAAG,CAAC,CAAC,EAC5BC,eAAkD,GAAGC,8BAAsB,EACpF;IAAA,KAjBKC,eAAe,GAA2E,CAAC,CAAC;IAAA,KACnFC,QAAQ,GAAuC,IAAIC,GAAG,CAAC,CAAC;IAAA,KACjEC,qBAAqB,GAA0C,CAAC,CAAC;IAAA,KAmCjEC,wBAAwB,GAA8B,IAAIC,GAAG,CAAC,CAAC;IAAA,KAE/DC,MAAM,GAAY,KAAK;IAAA,KACvBC,KAAK,GAOR,CAAC,CAAC;IAAA,KACCC,KAAK,GAAmB,EAAE;IAAA,KAE1BrC,SAAS,GAA8C,CAAC,CAAC;IAAA,KAEzDC,WAAW,GAAe,IAAAqC,4BAAgB,EAAC,CAAC;IAAA,KAC5CC,CAAC,GAA8C,CAAC,CAAC;IAAA,KACjDC,WAAW,GAAoB,CAAC,CAAC;IAAA,KACjCtC,kBAAkB,GAAsC,CAAC,CAAC;IAAA,KAU1DuC,SAAS,GAAgC,EAAE;IAAA,KAC3CC,SAAS,GAAG,KAAK;IAAA,KA7Db3B,QAAqF,GAArFA,QAAqF;IAAA,KACrFC,IAAY,GAAZA,IAAY;IAAA,KACZC,MAAgC,GAAhCA,MAAgC;IAAA,KAChCC,uBAAwF,GAAxFA,uBAAwF;IAAA,KACxFC,uBAAgD,GAAhDA,uBAAgD;IAAA,KAChDC,mBAAwC,GAAxCA,mBAAwC;IAAA,KACxCC,OAAuB,GAAvBA,OAAuB;IAAA,KACvBC,WAA2B,GAA3BA,WAA2B;IAAA,KAC3BC,OAAY,GAAZA,OAAY;IAAA,KACZC,sBAAgD,GAAhDA,sBAAgD;IAAA,KAChDE,OAAuB,GAAvBA,OAAuB;IAAA,KACvBC,eAAkD,GAAlDA,eAAkD;IAEzDgB,mBAAmB,CAAC,IAAI,CAACC,cAAc,CAAC;EAC5C;EAAC,IAAAC,MAAA,GAAAhC,gBAAA,CAAAiC,SAAA;EAAAD,MAAA,CAiDYE,OAAO,GAApB,eAAAA,QAAA,EAAsC;IAClC,IAAI,CAAClB,eAAe,GAAG,IAAAmB,0CAAyB,EAC5C,IAAI,CAACjC,QAAQ,EACb,IAAI,CAACG,uBAAuB,EAC5B,IAAI,CAACD,MAAM,CAACgC,UAChB,CAAC;IACD,IAAI,CAACjB,qBAAqB,GAAG,IAAIkB,uCAAqB,CAClD,IAAI,CAACrB,eAAe,EACpB,IAAI,CAACZ,MAAM,CAACkC,WAAW,EACvB,CAACC,OAAO,EAAEC,OAAO,KAAK,IAAAC,qCAAyB,EAAC,IAAI,EAASF,OAAO,EAAEC,OAAO,CAAC,EAC9EE,MAAM,IAAI,IAAI,CAACC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAED,MAAM,CACnD,CAAC;IAED,IAAME,qBAAqB,GAAG,IAAI,CAAC1C,QAAQ,CAAC2C,WAAW,CAACC,IAAI,CACxD,IAAAC,YAAM,EAACC,eAAe,IAAIA,eAAe,CAACC,cAAc,KAAK,IAAI,CAAC9C,IAAI,CAC1E,CAAC;IACD,IAAI,CAACuB,CAAC,GAAGkB,qBAAqB,CAACE,IAAI,CAC/B,IAAAI,cAAQ,EAACF,eAAe,IAAIA,eAAe,CAACG,MAAM,CACtD,CAAC;IACD,IAAI,CAACxB,WAAW,GAAGiB,qBAAqB,CAACE,IAAI,CACzC,IAAAM,SAAG,EAACJ,eAAe,IAAIA,eAAe,CAACK,UAAU,CACrD,CAAC;IAED,IAAI,CAAChE,kBAAkB,GAAG,IAAAiE,0CAAuB,EAAiB,IAAI,CAACvB,cAAc,CAAC;IACtF,IAAIwB,mBAAwB;IAC5B,IAAI,CAACpE,SAAS,GAAG,IAAIqE,uBAAa,CAC9B,IAAI,CAACpD,MAAM,CAACkC,WAAW,EACvB,IAAI,CAACZ,CAAC,CAACoB,IAAI,CAAC,IAAAC,YAAM,EAACU,EAAE,IAAI,CAACA,EAAE,CAACC,OAAO,CAAC,CAAC,EACtCC,OAAO,IAAI;MACP,IAAI,CAACJ,mBAAmB,EAAE;QACtBA,mBAAmB,GAAG,IAAAK,kDAAwB,EAAC,IAAI,CAAC7B,cAAc,CAAC;MACvE;MACA,OAAO,IAAA8B,6CAAmB,EAAC,IAAI,CAAC9B,cAAc,EAAEwB,mBAAmB,EAAEI,OAAO,CAAC;IACjF,CACJ,CAAC;;IAED;AACR;AACA;AACA;AACA;IACQ,IAAMG,oBAAoB,GAAG,MAAM,IAAI,CAAC5D,QAAQ,CAAC6D,YAAY;IAC7D,IAAMC,OAAO,GAAG,IAAI,CAAChD,eAAe,CAACiD,YAAY,CAAC,CAAC,CAACC,SAAS,CAACC,SAAS,IAAI;MACvE,IAAMhB,MAAM,GAAG,IAAIiB,KAAK,CAACD,SAAS,CAAChB,MAAM,CAACkB,MAAM,CAAC;MACjD,IAAMC,SAAS,GAAGH,SAAS,CAAChB,MAAM;MAClC,IAAMF,cAAc,GAAG,IAAI,CAAC9C,IAAI;MAChC,IAAMoE,qBAAqB,GAAGC,0BAAY,CAACD,qBAAqB;MAChE,KAAK,IAAIE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGH,SAAS,CAACD,MAAM,EAAEI,KAAK,EAAE,EAAE;QACnD,IAAMC,KAAK,GAAGJ,SAAS,CAACG,KAAK,CAAC;QAC9BtB,MAAM,CAACsB,KAAK,CAAC,GAAG;UACZE,UAAU,EAAED,KAAK,CAACC,UAAU;UAC5B1B,cAAc;UACdS,OAAO,EAAE,KAAK;UACdkB,SAAS,EAAEF,KAAK,CAACE,SAAS;UAC1BC,YAAY,EAAEN,qBAAqB,CAACG,KAAK,CAACG,YAAY,CAAQ;UAC9DC,oBAAoB,EAAEP,qBAAqB,CAACG,KAAK,CAACI,oBAAoB;QAC1E,CAAC;MACL;MACA,IAAM9B,eAAwE,GAAG;QAC7E+B,EAAE,EAAEZ,SAAS,CAACY,EAAE;QAChBC,QAAQ,EAAE,KAAK;QACf/B,cAAc,EAAE,IAAI,CAAC9C,IAAI;QACzB4D,YAAY,EAAED,oBAAoB;QAClCX,MAAM;QACN8B,aAAa,EAAE,IAAI,CAAC/E,QAAQ,CAACgF,KAAK;QAClC7B,UAAU,EAAEc,SAAS,CAACd,UAAU;QAChC8B,OAAO,EAAEhB,SAAS,CAACgB,OAAO;QAC1BC,OAAO,EAAEjB,SAAS,CAACiB,OAAO;QAC1BC,SAAS,EAAElB,SAAS,CAACkB;MACzB,CAAC;MACD,IAAI,CAACnF,QAAQ,CAACoF,KAAK,CAACtC,eAAe,CAAC;IACxC,CAAC,CAAC;IACF,IAAI,CAACxB,KAAK,CAAC+D,IAAI,CAACvB,OAAO,CAAC;;IAExB;AACR;AACA;AACA;IACQ,IAAI,CAACxC,KAAK,CAAC+D,IAAI,CACX,IAAI,CAACvE,eAAe,CACfwE,sBAAsB,CAAC,CAAC,CACxBtB,SAAS,CAACuB,IAAI,IAAI;MACf,IAAI,CACC3E,eAAe,CAAC2E,IAAI,CAACC,KAAK,EAAED,IAAI,CAACN,OAAO,CAAC,CACzCQ,IAAI,CAACC,MAAM,IAAI;QACZ,IAAI,CAAC5E,eAAe,CAAC6E,4BAA4B,CAAC;UAC9Cd,EAAE,EAAEU,IAAI,CAACV,EAAE;UACXa;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACV,CAAC,CACT,CAAC;IAED,OAAOE,2BAAoB;EAC/B;;EAGA;AACJ;AACA;AACA,KAHI;EAAA9D,MAAA,CAIA+D,OAAO,GAAP,SAAAA,QAAQC,mBAA4B,EAAoB;IACpD,MAAM,IAAAC,oBAAa,EAAC,SAAS,CAAC;EAClC;;EAEA;EAAA;EAAAjE,MAAA,CACAkE,eAAe,GAAf,SAAAA,gBAAA,EAAoC;IAChC,MAAM,IAAAD,oBAAa,EAAC,kBAAkB,CAAC;EAC3C,CAAC;EAAAjE,MAAA,CACDmE,iBAAiB,GAAjB,SAAAA,kBAAA,EAAsC;IAClC,MAAM,IAAAF,oBAAa,EAAC,kBAAkB,CAAC;EAC3C,CAAC;EAAAjE,MAAA,CACDoE,cAAc,GAAd,SAAAA,eAAeC,SAAiB,GAAG,EAAE,EAAiB;IAClD,OAAO,IAAI,CAACF,iBAAiB,CAAC,CAAC,CAACC,cAAc,CAACC,SAAS,CAAC;EAC7D,CAAC;EAAArE,MAAA,CACDsE,cAAc,GAAd,SAAAA,eAAeD,SAAiB,GAAG,EAAE,EAAgB;IACjD,OAAO,IAAI,CAACF,iBAAiB,CAAC,CAAC,CAACG,cAAc,CAACD,SAAS,CAAC;EAC7D,CAAC;EAAArE,MAAA,CAEKuE,MAAM,GAAZ,eAAAA,OACIC,IAAiC,EACc;IAC/C,IAAMC,WAAW,GAAG,MAAM,IAAI,CAACC,UAAU,CAAC,CAACF,IAAI,CAAQ,CAAC;IAExD,IAAMG,OAAO,GAAGF,WAAW,CAACG,KAAK,CAAC,CAAC,CAAC;IACpC,IAAAC,2CAA0B,EAAC,IAAI,EAAUL,IAAI,CAAS,IAAI,CAACpG,MAAM,CAACkC,WAAW,CAAC,EAASkE,IAAI,EAAEG,OAAO,CAAC;IACrG,IAAMG,YAAY,GAAG,IAAAC,qBAAc,EAACN,WAAW,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,OAAOF,YAAY;EACvB,CAAC;EAAA9E,MAAA,CAEK0E,UAAU,GAAhB,eAAAA,WACIO,QAA0B,EAI3B;IACC;AACR;AACA;AACA;IACQ,IAAIA,QAAQ,CAAC5C,MAAM,KAAK,CAAC,EAAE;MACvB,OAAO;QACH2C,OAAO,EAAE,EAAE;QACXJ,KAAK,EAAE;MACX,CAAC;IACL;IAEA,IAAMtE,WAAW,GAAG,IAAI,CAAClC,MAAM,CAACkC,WAAW;;IAG3C;AACR;AACA;AACA;AACA;IACQ,IAAI4E,UAA0C;IAC9C,IAAI,IAAI,CAACC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;MAChCD,UAAU,GAAG,MAAME,OAAO,CAACC,GAAG,CAC1BJ,QAAQ,CAAC7D,GAAG,CAACO,OAAO,IAAI;QACpB,IAAM2D,UAAU,GAAG,IAAAC,8CAA0B,EAAC,IAAI,CAACnH,MAAM,EAAEuD,OAAO,CAAC;QACnE,OAAO,IAAI,CAAChB,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE2E,UAAU,CAAC,CAC7C3B,IAAI,CAAC,MAAM;UACR,OAAO;YAAE6B,QAAQ,EAAEF;UAAW,CAAC;QACnC,CAAC,CAAC;MACV,CAAC,CACL,CAAC;IACL,CAAC,MAAM;MACHJ,UAAU,GAAG,EAAE;MACf,KAAK,IAAIzC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGwC,QAAQ,CAAC5C,MAAM,EAAEI,KAAK,EAAE,EAAE;QAClD,IAAMd,OAAO,GAAGsD,QAAQ,CAACxC,KAAK,CAAC;QAC/B,IAAM6C,UAAU,GAAG,IAAAC,8CAA0B,EAAC,IAAI,CAACnH,MAAM,EAAEuD,OAAO,CAAC;QACnEuD,UAAU,CAACzC,KAAK,CAAC,GAAG;UAAE+C,QAAQ,EAAEF;QAAW,CAAC;MAChD;IACJ;IAEA,IAAMG,OAAO,GAAG,MAAM,IAAI,CAACzG,eAAe,CAAC0G,SAAS,CAChDR,UAAU,EACV,2BACJ,CAAC;;IAED;IACA,IAAMS,WAAW,GAAG,IAAAC,qCAA2B,EAA6B,IAAI,CAACzI,SAAS,EAAEsI,OAAO,CAACT,OAAO,CAAC;IAE5G,IAAI,IAAI,CAACG,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE;MACjC,IAAMU,OAAoC,GAAG,IAAIxG,GAAG,CAAC,CAAC;MACtD6F,UAAU,CAACY,OAAO,CAACC,GAAG,IAAI;QACtB,IAAMC,GAAG,GAAGD,GAAG,CAACP,QAAQ;QACxBK,OAAO,CAACI,GAAG,CAAED,GAAG,CAAS1F,WAAW,CAAC,EAAS0F,GAAG,CAAC;MACtD,CAAC,CAAC;MACF,MAAMZ,OAAO,CAACC,GAAG,CACbM,WAAW,CAACvE,GAAG,CAAC4E,GAAG,IAAI;QACnB,OAAO,IAAI,CAACrF,SAAS,CACjB,MAAM,EAAE,QAAQ,EAChBkF,OAAO,CAACK,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC,EACxBH,GACJ,CAAC;MACL,CAAC,CACL,CAAC;IACL;IAEA,OAAO;MACHhB,OAAO,EAAEW,WAAW;MACpBf,KAAK,EAAEa,OAAO,CAACb;IACnB,CAAC;EACL,CAAC;EAAA5E,MAAA,CAEKoG,UAAU,GAAhB,eAAAA,WACIC,GAAa,EAId;IACC,IAAM/F,WAAW,GAAG,IAAI,CAAClC,MAAM,CAACkC,WAAW;IAC3C;AACR;AACA;AACA;IACQ,IAAI+F,GAAG,CAAChE,MAAM,KAAK,CAAC,EAAE;MAClB,OAAO;QACH2C,OAAO,EAAE,EAAE;QACXJ,KAAK,EAAE;MACX,CAAC;IACL;IAEA,IAAM0B,aAAa,GAAG,MAAM,IAAI,CAACC,SAAS,CAACF,GAAG,CAAC,CAACG,IAAI,CAAC,CAAC;IACtD,IAAMvB,QAA0C,GAAG,EAAE;IACrD,IAAMY,OAAoD,GAAG,IAAIxG,GAAG,CAAC,CAAC;IACtE+C,KAAK,CAACqE,IAAI,CAACH,aAAa,CAACI,MAAM,CAAC,CAAC,CAAC,CAACZ,OAAO,CAACa,UAAU,IAAI;MACrD,IAAMC,IAAoC,GAAGD,UAAU,CAACE,aAAa,CAAC,IAAI,CAAQ;MAClF5B,QAAQ,CAAC1B,IAAI,CAACqD,IAAI,CAAC;MACnBf,OAAO,CAACI,GAAG,CAACU,UAAU,CAACR,OAAO,EAAES,IAAI,CAAC;IACzC,CAAC,CAAC;IAEF,MAAMxB,OAAO,CAACC,GAAG,CACbJ,QAAQ,CAAC7D,GAAG,CAAC4E,GAAG,IAAI;MAChB,IAAMG,OAAO,GAAIH,GAAG,CAAS,IAAI,CAAC5H,MAAM,CAACkC,WAAW,CAAC;MACrD,OAAO,IAAI,CAACK,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAEqF,GAAG,EAAEM,aAAa,CAACJ,GAAG,CAACC,OAAO,CAAC,CAAC;IAC3E,CAAC,CACL,CAAC;IACD,IAAMW,UAA0C,GAAG7B,QAAQ,CAAC7D,GAAG,CAAC4E,GAAG,IAAI;MACnE,IAAMe,QAAQ,GAAG,IAAAC,gBAAS,EAAChB,GAAG,CAAC;MAC/Be,QAAQ,CAACE,QAAQ,GAAG,IAAI;MACxB,OAAO;QACHC,QAAQ,EAAElB,GAAG;QACbR,QAAQ,EAAEuB;MACd,CAAC;IACL,CAAC,CAAC;IACF,IAAMtB,OAAO,GAAG,MAAM,IAAI,CAACzG,eAAe,CAAC0G,SAAS,CAChDoB,UAAU,EACV,2BACJ,CAAC;IAED,IAAMK,UAAoB,GAAG1B,OAAO,CAACT,OAAO,CAAC5D,GAAG,CAACgG,CAAC,IAAIA,CAAC,CAAC9G,WAAW,CAAW,CAAC;;IAE/E;IACA,MAAM8E,OAAO,CAACC,GAAG,CACb8B,UAAU,CAAC/F,GAAG,CAAC2B,EAAE,IAAI;MACjB,OAAO,IAAI,CAACpC,SAAS,CACjB,MAAM,EACN,QAAQ,EACRkF,OAAO,CAACK,GAAG,CAACnD,EAAE,CAAC,EACfuD,aAAa,CAACJ,GAAG,CAACnD,EAAE,CACxB,CAAC;IACL,CAAC,CACL,CAAC;IAED,IAAM4C,WAAW,GAAGwB,UAAU,CAAC/F,GAAG,CAAC2B,EAAE,IAAI,IAAAsE,wBAAiB,EAACf,aAAa,EAAEvD,EAAE,CAAC,CAAC;IAE9E,OAAO;MACHiC,OAAO,EAAEW,WAAW;MACpBf,KAAK,EAAEa,OAAO,CAACb;IACnB,CAAC;EACL;;EAEA;AACJ;AACA,KAFI;EAAA5E,MAAA,CAGMsH,UAAU,GAAhB,eAAAA,WAAiBrC,QAAmC,EAGjD;IACC,IAAMsC,UAA4B,GAAG,EAAE;IACvC,IAAMC,cAA2C,GAAG,IAAInI,GAAG,CAAC,CAAC;IAC7D4F,QAAQ,CAACa,OAAO,CAACnE,OAAO,IAAI;MACxB,IAAM8F,OAAO,GAAG,IAAAlC,8CAA0B,EAAC,IAAI,CAACnH,MAAM,EAAEuD,OAAO,CAAC;MAChE,IAAMwE,OAAe,GAAGsB,OAAO,CAAC,IAAI,CAACrJ,MAAM,CAACkC,WAAW,CAAQ;MAC/D,IAAI,CAAC6F,OAAO,EAAE;QACV,MAAM,IAAAuB,mBAAU,EAAC,MAAM,EAAE;UACrBpH,WAAW,EAAE,IAAI,CAAClC,MAAM,CAACkC,WAAqB;UAC9CsG,IAAI,EAAEa,OAAO;UACbrJ,MAAM,EAAE,IAAI,CAACA,MAAM,CAACgC;QACxB,CAAC,CAAC;MACN;MACAoH,cAAc,CAACvB,GAAG,CAACE,OAAO,EAAEsB,OAAO,CAAC;MACpCF,UAAU,CAAChE,IAAI,CAACkE,OAAO,CAAC;IAC5B,CAAC,CAAC;IAEF,IAAM3C,YAAY,GAAG,MAAM,IAAI,CAACJ,UAAU,CAAC6C,UAAU,CAAC;IACtD,IAAMvC,OAAO,GAAGF,YAAY,CAACE,OAAO,CAAC2C,KAAK,CAAC,CAAC,CAAC;IAC7C,IAAM/C,KAA4C,GAAG,EAAE;;IAEvD;IACA,MAAMQ,OAAO,CAACC,GAAG,CACbP,YAAY,CAACF,KAAK,CAACxD,GAAG,CAAC,MAAOwG,GAAG,IAAK;MAClC,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACpBjD,KAAK,CAACrB,IAAI,CAACqE,GAAG,CAAC;MACnB,CAAC,MAAM;QACH,IAAM7E,EAAE,GAAG6E,GAAG,CAACjF,UAAU;QACzB,IAAMmF,SAAS,GAAG,IAAAT,wBAAiB,EAACG,cAAc,EAAEzE,EAAE,CAAC;QACvD,IAAMgF,WAAW,GAAG,IAAAhD,qBAAc,EAAC6C,GAAG,CAACI,YAAY,CAAC;QACpD,IAAMhC,GAAG,GAAG,IAAI,CAAC7I,SAAS,CAAC8K,oBAAoB,CAAC,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,IAAMG,MAAM,GAAG,MAAMlC,GAAG,CAACmC,iBAAiB,CAAC,MAAML,SAAS,CAAC;QAC3D9C,OAAO,CAACzB,IAAI,CAAC2E,MAAM,CAAC;MACxB;IACJ,CAAC,CACL,CAAC;IACD,OAAO;MACHtD,KAAK;MACLI;IACJ,CAAC;EACL;;EAEA;AACJ;AACA,KAFI;EAAAhF,MAAA,CAGMoI,MAAM,GAAZ,eAAAA,OAAa5D,IAA6B,EAAmD;IACzF,IAAM6D,UAAU,GAAG,MAAM,IAAI,CAACf,UAAU,CAAC,CAAC9C,IAAI,CAAC,CAAC;IAChD,IAAAK,2CAA0B,EACtB,IAAI,CAAC9E,cAAc,EAClByE,IAAI,CAAS,IAAI,CAACpG,MAAM,CAACkC,WAAW,CAAC,EACtCkE,IAAI,EACJ6D,UAAU,CAACzD,KAAK,CAAC,CAAC,CACtB,CAAC;IACD,OAAOyD,UAAU,CAACrD,OAAO,CAAC,CAAC,CAAC;EAChC;;EAEA;AACJ;AACA,KAFI;EAAAhF,MAAA,CAGAsI,iBAAiB,GAAjB,SAAAA,kBAAkB9D,IAA6B,EAAmD;IAC9F,IAAMiD,OAAO,GAAG,IAAAlC,8CAA0B,EAAC,IAAI,CAACnH,MAAM,EAAEoG,IAAI,CAAC;IAC7D,IAAM2B,OAAe,GAAGsB,OAAO,CAAC,IAAI,CAACrJ,MAAM,CAACkC,WAAW,CAAQ;IAC/D,IAAI,CAAC6F,OAAO,EAAE;MACV,MAAM,IAAAuB,mBAAU,EAAC,MAAM,EAAE;QACrBd,IAAI,EAAEpC;MACV,CAAC,CAAC;IACN;;IAEA;IACA,IAAI+D,KAAK,GAAG,IAAI,CAACnJ,wBAAwB,CAAC8G,GAAG,CAACC,OAAO,CAAC;IACtD,IAAI,CAACoC,KAAK,EAAE;MACRA,KAAK,GAAGzE,2BAAoB;IAChC;IACAyE,KAAK,GAAGA,KAAK,CACR5E,IAAI,CAAC,MAAM6E,wCAAwC,CAAC,IAAI,EAASrC,OAAO,EAASsB,OAAO,CAAC,CAAC,CAC1F9D,IAAI,CAAE8E,WAAW,IAAK;MACnB,IAAI,CAACA,WAAW,CAACC,QAAQ,EAAE;QACvB,OAAOC,wBAAwB,CAACF,WAAW,CAACzC,GAAG,EAAEyB,OAAO,CAAC;MAC7D,CAAC,MAAM;QACH,OAAOgB,WAAW,CAACzC,GAAG;MAC1B;IACJ,CAAC,CAAC;IACN,IAAI,CAAC5G,wBAAwB,CAAC6G,GAAG,CAACE,OAAO,EAAEoC,KAAK,CAAC;IACjD,OAAOA,KAAK;EAChB,CAAC;EAAAvI,MAAA,CAED4I,IAAI,GAAJ,SAAAA,KAAKC,QAAqC,EAKxC;IACE,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAC9B,MAAM,IAAAnB,mBAAU,EAAC,MAAM,EAAE;QACrBmB;MACJ,CAAC,CAAC;IACN;IAEA,IAAI,CAACA,QAAQ,EAAE;MACXA,QAAQ,GAAG,IAAAC,yBAAgB,EAAC,CAAC;IACjC;IAEA,IAAMC,KAAK,GAAG,IAAAC,sBAAa,EAAC,MAAM,EAAEH,QAAQ,EAAE,IAAW,CAAC;IAC1D,OAAOE,KAAK;EAChB,CAAC;EAAA/I,MAAA,CAEDiJ,OAAO,GAAP,SAAAA,QACIJ,QAAqD,EAMvD;IAEE;IACA,IACI,OAAOA,QAAQ,KAAK,QAAQ,IAC5BzG,KAAK,CAAC8G,OAAO,CAACL,QAAQ,CAAC,EACzB;MACE,MAAM,IAAAM,uBAAc,EAAC,MAAM,EAAE;QACzBN;MACJ,CAAC,CAAC;IACN;IAEA,IAAIE,KAAK;IAET,IAAI,OAAOF,QAAQ,KAAK,QAAQ,EAAE;MAC9BE,KAAK,GAAG,IAAAC,sBAAa,EAAC,SAAS,EAAE;QAC7BI,QAAQ,EAAE;UACN,CAAC,IAAI,CAAChL,MAAM,CAACkC,WAAW,GAAGuI;QAC/B,CAAC;QACDQ,KAAK,EAAE;MACX,CAAC,EAAE,IAAW,CAAC;IACnB,CAAC,MAAM;MACH,IAAI,CAACR,QAAQ,EAAE;QACXA,QAAQ,GAAG,IAAAC,yBAAgB,EAAC,CAAC;MACjC;;MAGA;MACA,IAAKD,QAAQ,CAAgBQ,KAAK,EAAE;QAChC,MAAM,IAAA3B,mBAAU,EAAC,KAAK,CAAC;MAC3B;MAEAmB,QAAQ,GAAG,IAAA7B,gBAAS,EAAC6B,QAAQ,CAAC;MAC7BA,QAAQ,CAASQ,KAAK,GAAG,CAAC;MAC3BN,KAAK,GAAG,IAAAC,sBAAa,EAAiB,SAAS,EAAEH,QAAQ,EAAE,IAAW,CAAC;IAC3E;IAGA,OAAOE,KAAK;EAChB,CAAC;EAAA/I,MAAA,CAEDsJ,KAAK,GAAL,SAAAA,MAAMT,QAAqD,EAKzD;IACE,IAAI,CAACA,QAAQ,EAAE;MACXA,QAAQ,GAAG,IAAAC,yBAAgB,EAAC,CAAC;IACjC;IACA,IAAMC,KAAK,GAAG,IAAAC,sBAAa,EAAC,OAAO,EAAEH,QAAQ,EAAE,IAAW,CAAC;IAC3D,OAAOE,KAAK;EAChB;;EAEA;AACJ;AACA;AACA,KAHI;EAAA/I,MAAA,CAIAuG,SAAS,GAAT,SAAAA,UACIF,GAAa,EAMf;IACE,IAAMkD,UAAsC,GAAG;MAC3CH,QAAQ,EAAE;QACN,CAAC,IAAI,CAAChL,MAAM,CAACkC,WAAW,GAAG;UACvBkJ,GAAG,EAAEnD,GAAG,CAACsB,KAAK,CAAC,CAAC;QACpB;MACJ;IACJ,CAAC;IACD,IAAMoB,KAAK,GAAG,IAAAC,sBAAa,EAAC,WAAW,EAAEO,UAAU,EAAE,IAAW,CAAC;IACjE,OAAOR,KAAK;EAChB;;EAEA;AACJ;AACA,KAFI;EAAA/I,MAAA,CAKAyJ,UAAU,GAAV,SAAAA,WAAA,EAA2B;IACvB,MAAM,IAAAxF,oBAAa,EAAC,WAAW,CAAC;EACpC;;EAEA;AACJ;AACA;AACA,KAHI;EAAAjE,MAAA,CAIA0J,UAAU,GAAV,SAAAA,WAAWC,aAAkD,EAAiB;IAC1E,MAAM,IAAA1F,oBAAa,EAAC,WAAW,CAAC;EACpC,CAAC;EAAAjE,MAAA,CAED4J,UAAU,GAAV,SAAAA,WAAWC,UAA6C,EAA0C;IAC9F,MAAM,IAAA5F,oBAAa,EAAC,MAAM,CAAC;EAC/B;;EAEA;AACJ;AACA,KAFI;EAAAjE,MAAA,CAGA8J,OAAO,GAAP,SAAAA,QAAQC,IAAkB,EAAEC,GAAgB,EAAEC,GAAQ,EAAEC,QAAQ,GAAG,KAAK,EAAE;IACtE,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;MAC3B,MAAM,IAAAd,uBAAc,EAAC,MAAM,EAAE;QACzBa,GAAG;QACHD;MACJ,CAAC,CAAC;IACN;IAEA,IAAI,CAAClM,UAAU,CAACsM,QAAQ,CAACJ,IAAI,CAAC,EAAE;MAC5B,MAAM,IAAAZ,uBAAc,EAAC,MAAM,EAAE;QACzBa,GAAG;QACHD;MACJ,CAAC,CAAC;IACN;IAEA,IAAI,CAACjM,UAAU,CAACqM,QAAQ,CAACH,GAAG,CAAC,EAAE;MAC3B,MAAM,IAAAtC,mBAAU,EAAC,MAAM,EAAE;QACrBsC;MACJ,CAAC,CAAC;IACN;IAEA,IAAID,IAAI,KAAK,MAAM,IAAIC,GAAG,KAAK,QAAQ,IAAIE,QAAQ,KAAK,IAAI,EAAE;MAC1D,MAAM,IAAAxC,mBAAU,EAAC,OAAO,EAAE;QACtBqC,IAAI;QACJC,GAAG;QACHE;MACJ,CAAC,CAAC;IACN;;IAEA;IACA,IAAME,QAAQ,GAAGH,GAAG,CAACI,IAAI,CAAC,IAAI,CAAC;IAE/B,IAAMC,OAAO,GAAGJ,QAAQ,GAAG,UAAU,GAAG,QAAQ;IAEhD,IAAI,CAAC3K,KAAK,CAACyK,GAAG,CAAC,GAAG,IAAI,CAACzK,KAAK,CAACyK,GAAG,CAAC,IAAI,CAAC,CAAC;IACvC,IAAI,CAACzK,KAAK,CAACyK,GAAG,CAAC,CAACD,IAAI,CAAC,GAAG,IAAI,CAACxK,KAAK,CAACyK,GAAG,CAAC,CAACD,IAAI,CAAC,IAAI;MAC7CQ,MAAM,EAAE,EAAE;MACVL,QAAQ,EAAE;IACd,CAAC;IACD,IAAI,CAAC3K,KAAK,CAACyK,GAAG,CAAC,CAACD,IAAI,CAAC,CAACO,OAAO,CAAC,CAAC/G,IAAI,CAAC6G,QAAQ,CAAC;EACjD,CAAC;EAAApK,MAAA,CAEDwK,QAAQ,GAAR,SAAAA,SAAST,IAAkB,EAAEC,GAAgB,EAAE;IAC3C,IACI,CAAC,IAAI,CAACzK,KAAK,CAACyK,GAAG,CAAC,IAChB,CAAC,IAAI,CAACzK,KAAK,CAACyK,GAAG,CAAC,CAACD,IAAI,CAAC,EACxB;MACE,OAAO;QACHQ,MAAM,EAAE,EAAE;QACVL,QAAQ,EAAE;MACd,CAAC;IACL;IACA,OAAO,IAAI,CAAC3K,KAAK,CAACyK,GAAG,CAAC,CAACD,IAAI,CAAC;EAChC,CAAC;EAAA/J,MAAA,CAEDmF,QAAQ,GAAR,SAAAA,SAAS4E,IAAkB,EAAEC,GAAgB,EAAE;IAC3C;AACR;AACA;AACA;IACQ,IACI,CAAC,IAAI,CAACzK,KAAK,CAACyK,GAAG,CAAC,IAChB,CAAC,IAAI,CAACzK,KAAK,CAACyK,GAAG,CAAC,CAACD,IAAI,CAAC,EACxB;MACE,OAAO,KAAK;IAChB;IAEA,IAAMxK,KAAK,GAAG,IAAI,CAACiL,QAAQ,CAACT,IAAI,EAAEC,GAAG,CAAC;IACtC,IAAI,CAACzK,KAAK,EAAE;MACR,OAAO,KAAK;IAChB;IACA,OAAOA,KAAK,CAACgL,MAAM,CAAClI,MAAM,GAAG,CAAC,IAAI9C,KAAK,CAAC2K,QAAQ,CAAC7H,MAAM,GAAG,CAAC;EAC/D,CAAC;EAAArC,MAAA,CAEDW,SAAS,GAAT,SAAAA,UAAUoJ,IAAkB,EAAEC,GAAgB,EAAEpD,IAAS,EAAE6D,QAAc,EAAgB;IACrF,IAAMlL,KAAK,GAAG,IAAI,CAACiL,QAAQ,CAACT,IAAI,EAAEC,GAAG,CAAC;IAEtC,IAAI,CAACzK,KAAK,EAAE;MACR,OAAOuE,2BAAoB;IAC/B;;IAEA;IACA,IAAM4G,KAAK,GAAGnL,KAAK,CAACgL,MAAM,CAACnJ,GAAG,CAAEuJ,IAAS,IAAK,MAAMA,IAAI,CAAC/D,IAAI,EAAE6D,QAAQ,CAAC,CAAC;IACzE,OAAO,IAAAG,oBAAa,EAACF,KAAK;IACtB;IAAA,CACC/G,IAAI,CAAC,MAAMyB,OAAO,CAACC,GAAG,CACnB9F,KAAK,CAAC2K,QAAQ,CACT9I,GAAG,CAAEuJ,IAAS,IAAKA,IAAI,CAAC/D,IAAI,EAAE6D,QAAQ,CAAC,CAChD,CAAC,CAAC;EACV;;EAEA;AACJ;AACA,KAFI;EAAAzK,MAAA,CAGA6K,aAAa,GAAb,SAAAA,cAAcd,IAAkB,EAAEC,GAAgB,EAAEpD,IAAS,EAAE6D,QAAa,EAAE;IAC1E,IAAI,CAAC,IAAI,CAACtF,QAAQ,CAAC4E,IAAI,EAAEC,GAAG,CAAC,EAAE;MAC3B;IACJ;IACA,IAAMzK,KAAK,GAAG,IAAI,CAACiL,QAAQ,CAACT,IAAI,EAAEC,GAAG,CAAC;IACtC,IAAI,CAACzK,KAAK,EAAE;IACZA,KAAK,CAACgL,MAAM,CAACzE,OAAO,CAAE6E,IAAS,IAAKA,IAAI,CAAC/D,IAAI,EAAE6D,QAAQ,CAAC,CAAC;EAC7D;;EAEA;AACJ;AACA;AACA;AACA,KAJI;EAAAzK,MAAA,CAKA8K,WAAW,GAAX,SAAAA,YAAYC,IAAY,EAAiB;IACrC,IAAMC,GAAG,GAAG,IAAI5F,OAAO,CAAO6F,GAAG,IAAI;MACjC,IAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC7B,IAAI,CAAClM,QAAQ,CAACmM,MAAM,CAACF,OAAO,CAAC;QAC7BD,GAAG,CAAC,CAAC;MACT,CAAC,EAAEF,IAAI,CAAC;MACR,IAAI,CAAC9L,QAAQ,CAACoM,GAAG,CAACH,OAAO,CAAC;IAC9B,CAAC,CAAC;IACF,OAAOF,GAAG;EACd,CAAC;EAAAhL,MAAA,CAEDsL,OAAO,GAAP,SAAAA,QAAA,EAA4B;IACxB,IAAI,IAAI,CAACzL,SAAS,EAAE;MAChB,OAAO0L,4BAAqB;IAChC;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAAC1L,SAAS,GAAG,IAAI;IAGrBuC,KAAK,CAACqE,IAAI,CAAC,IAAI,CAACxH,QAAQ,CAAC,CAAC6G,OAAO,CAACoF,OAAO,IAAIM,YAAY,CAACN,OAAO,CAAC,CAAC;IACnE,IAAI,IAAI,CAAC7N,kBAAkB,EAAE;MACzB,IAAI,CAACA,kBAAkB,CAACiO,OAAO,CAAC,CAAC;IACrC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,OAAO,IAAI,CAACpN,QAAQ,CAACuN,kBAAkB,CAAC,CAAC,CACpC9H,IAAI,CAAC,MAAMyB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACzF,SAAS,CAACwB,GAAG,CAACsK,EAAE,IAAIA,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CACvD/H,IAAI,CAAC,MAAM,IAAI,CAAC3E,eAAe,CAAC2M,KAAK,CAAC,CAAC,CAAC,CACxChI,IAAI,CAAC,MAAM;MACR;AAChB;AACA;AACA;AACA;AACA;MACgB,IAAI,CAACnE,KAAK,CAACsG,OAAO,CAAC8F,GAAG,IAAIA,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC;MAE5C,OAAO,IAAI,CAAC3N,QAAQ,CAAC4N,WAAW,CAAC,IAAI,CAAC3N,IAAI,CAAC;MAC3C,OAAO,IAAA4N,0BAAmB,EAAC,yBAAyB,EAAE,IAAI,CAAC,CAACpI,IAAI,CAAC,MAAM,IAAI,CAAC;IAChF,CAAC,CAAC;EACV;;EAEA;AACJ;AACA,KAFI;EAAA3D,MAAA,CAGMgM,MAAM,GAAZ,eAAAA,OAAA,EAA6B;IACzB,MAAM,IAAI,CAACV,OAAO,CAAC,CAAC;IACpB,MAAM,IAAAW,4CAAwB,EAC1B,IAAI,CAAC/N,QAAQ,CAACgO,OAAO,EACrB,IAAI,CAAChO,QAAQ,CAACiO,aAAa,EAC3B,IAAI,CAACjO,QAAQ,CAACgF,KAAK,EACnB,IAAI,CAAChF,QAAQ,CAACC,IAAI,EAClB,IAAI,CAACA,IAAI,EACT,IAAI,CAACD,QAAQ,CAACkO,QAAQ,EACtB,IAAI,CAAClO,QAAQ,CAACmO,YAClB,CAAC;EACL,CAAC;EAAA,WAAAC,aAAA,CAAAC,OAAA,EAAAvO,gBAAA;IAAAgM,GAAA;IAAA9D,GAAA,EA7sBD,SAAAA,CAAA,EAA+D;MAC3D,OAAO,IAAI,CAACxG,CAAC,CAACoB,IAAI,CACd,IAAAC,YAAM,EAACU,EAAE,IAAIA,EAAE,CAACmB,SAAS,KAAK,QAAQ,CAC1C,CAAC;IACL;EAAC;IAAAoH,GAAA;IAAA9D,GAAA,EACD,SAAAA,CAAA,EAA+D;MAC3D,OAAO,IAAI,CAACxG,CAAC,CAACoB,IAAI,CACd,IAAAC,YAAM,EAACU,EAAE,IAAIA,EAAE,CAACmB,SAAS,KAAK,QAAQ,CAC1C,CAAC;IACL;EAAC;IAAAoH,GAAA;IAAA9D,GAAA,EACD,SAAAA,CAAA,EAA+D;MAC3D,OAAO,IAAI,CAACxG,CAAC,CAACoB,IAAI,CACd,IAAAC,YAAM,EAACU,EAAE,IAAIA,EAAE,CAACmB,SAAS,KAAK,QAAQ,CAC1C,CAAC;IACL;;IAGA;;IAqBA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAoH,GAAA;IAAA9D,GAAA,EAyqBA,SAAAA,CAAA,EAA+F;MAC3F,OAAO,IAAI;IACf;EAAC;AAAA;AAGL;AACA;AACA;AACA;AACA,SAASpG,mBAAmBA,CACxB0M,UAAkC,EACpC;EACE,IAAIzO,YAAY,EAAE,OAAO,CAAC;EAC1BA,YAAY,GAAG,IAAI;EACnB,IAAM0O,QAAQ,GAAGC,MAAM,CAACC,cAAc,CAACH,UAAU,CAAC;EAClD1O,UAAU,CAACgI,OAAO,CAACkE,GAAG,IAAI;IACtBnM,UAAU,CAACuD,GAAG,CAAC2I,IAAI,IAAI;MACnB,IAAM6C,MAAM,GAAG7C,IAAI,GAAG,IAAA8C,cAAO,EAAC7C,GAAG,CAAC;MAClCyC,QAAQ,CAACG,MAAM,CAAC,GAAG,UAAU3C,GAAW,EAAEC,QAAiB,EAAE;QACzD,OAAO,IAAI,CAACJ,OAAO,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,CAAC;MACjD,CAAC;IACL,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEA,SAASvB,wBAAwBA,CAC7B3C,GAA8B,EAC9BxB,IAA+B,EACG;EAClC,OAAOwB,GAAG,CAACmC,iBAAiB,CAAE2E,SAAS,IAAK;IACxC,OAAOtI,IAAI;EACf,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA,SAASgE,wCAAwCA,CAC7CuE,YAAqC,EACrC5G,OAAe,EACf3B,IAAS,EAMX;EACE;AACJ;AACA;AACA;EACI,IAAMwI,gBAAgB,GAAGD,YAAY,CAAC5P,SAAS,CAAC8P,6BAA6B,CAAC9G,OAAO,CAAC;EACtF,IAAI6G,gBAAgB,EAAE;IAClB,OAAO5H,OAAO,CAAC8H,OAAO,CAAC;MACnBlH,GAAG,EAAE+G,YAAY,CAAC5P,SAAS,CAAC8K,oBAAoB,CAAC,CAAC+E,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;MACvEtE,QAAQ,EAAE;IACd,CAAC,CAAC;EACN;EACA,OAAOqE,YAAY,CAAC9D,OAAO,CAAC9C,OAAO,CAAC,CAACK,IAAI,CAAC,CAAC,CACtC7C,IAAI,CAACqC,GAAG,IAAI;IACT,IAAI,CAACA,GAAG,EAAE;MACN,OAAO+G,YAAY,CAACxI,MAAM,CAACC,IAAI,CAAC,CAACb,IAAI,CAACuE,MAAM,KAAK;QAC7ClC,GAAG,EAAEkC,MAAM;QACXQ,QAAQ,EAAE;MACd,CAAC,CAAC,CAAC;IACP,CAAC,MAAM;MACH,OAAO;QACH1C,GAAG;QACH0C,QAAQ,EAAE;MACd,CAAC;IACL;EACJ,CAAC,CAAC;AACV;;AAEA;AACA;AACA;AACO,SAASyE,kBAAkBA,CAC9B;EACIjP,QAAQ;EACRC,IAAI;EACJC,MAAM;EACNE,uBAAuB,GAAG,CAAC,CAAC;EAC5BC,mBAAmB,GAAG,CAAC,CAAC;EACxB6O,WAAW,GAAG,IAAI;EAClBvO,OAAO,GAAG,CAAC,CAAC;EACZL,OAAO,GAAG,CAAC,CAAC;EACZC,WAAW,GAAG,CAAC,CAAC;EAChBC,OAAO,GAAG,CAAC,CAAC;EACZ2O,cAAc,GAAG,KAAK;EACtB1O,sBAAsB,GAAGC,yCAA6B;EACtDE,eAAe,GAAGC;AACjB,CAAC,EACe;EACrB,IAAMuO,6BAAwE,GAAG;IAC7EC,qBAAqB,EAAErP,QAAQ,CAACgF,KAAK;IACrCsK,YAAY,EAAEtP,QAAQ,CAACC,IAAI;IAC3B8C,cAAc,EAAE9C,IAAI;IACpBC,MAAM,EAAEA,MAAM,CAACgC,UAAU;IACzB1B,OAAO,EAAEJ,uBAAuB;IAChCmP,aAAa,EAAEvP,QAAQ,CAACuP,aAAa;IACrCrB,QAAQ,EAAElO,QAAQ,CAACkO,QAAQ;IAC3BsB,OAAO,EAAElL,0BAAY,CAACmL,SAAS,CAAC;EACpC,CAAC;EAED,IAAAC,qBAAc,EACV,4BAA4B,EAC5BN,6BACJ,CAAC;EAED,OAAO,IAAAO,qDAAiC,EACpC3P,QAAQ,EACRoP,6BACJ,CAAC,CAAC3J,IAAI,CAAC3E,eAAe,IAAI;IACtB,IAAMwN,UAAU,GAAG,IAAIxO,gBAAgB,CACnCE,QAAQ,EACRC,IAAI,EACJC,MAAM,EACNY,eAAe,EACfV,uBAAuB,EACvBC,mBAAmB,EACnBC,OAAO,EACPC,WAAW,EACXC,OAAO,EACPC,sBAAsB,EACtBE,OAAO,EACPC,eACJ,CAAC;IAED,OAAO0N,UAAU,CACZtM,OAAO,CAAC,CAAC,CACTyD,IAAI,CAAC,MAAM;MACR;MACA+I,MAAM,CACDoB,OAAO,CAACjP,OAAO,CAAC,CAChBiH,OAAO,CAAC,CAAC,CAACiI,OAAO,EAAE9D,GAAG,CAAC,KAAK;QACzByC,MAAM,CAACsB,cAAc,CAACxB,UAAU,EAAEuB,OAAO,EAAE;UACvC7H,GAAG,EAAEA,CAAA,KAAO+D,GAAG,CAASI,IAAI,CAACmC,UAAU;QAC3C,CAAC,CAAC;MACN,CAAC,CAAC;MAEN,IAAIxB,GAAG,GAAGlH,2BAAoB;MAC9B,IAAIsJ,WAAW,IAAIZ,UAAU,CAACpO,MAAM,CAAC6P,OAAO,KAAK,CAAC,EAAE;QAChDjD,GAAG,GAAGwB,UAAU,CAAClI,cAAc,CAAC,CAAC;MACrC;MACA,OAAO0G,GAAG;IACd,CAAC,CAAC,CACDrH,IAAI,CAAC,MAAM;MACR,IAAAiK,qBAAc,EAAC,oBAAoB,EAAE;QACjCpB,UAAU;QACV0B,OAAO,EAAE;UACL/P,IAAI;UACJC,MAAM;UACNY,eAAe;UACfV,uBAAuB;UACvBC,mBAAmB;UACnBC,OAAO;UACPC,WAAW;UACXC,OAAO;UACPC,sBAAsB;UACtB0O,cAAc;UACdxO;QACJ;MACJ,CAAC,CAAC;MACF,OAAO2N,UAAU;IACrB,CAAC;IACD;AACZ;AACA;AACA,OAHY,CAIC2B,KAAK,CAACvG,GAAG,IAAI;MACV,OAAO5I,eAAe,CAAC2M,KAAK,CAAC,CAAC,CACzBhI,IAAI,CAAC,MAAMyB,OAAO,CAACgJ,MAAM,CAACxG,GAAG,CAAC,CAAC;IACxC,CAAC,CAAC;EACV,CAAC,CAAC;AACN;AAEO,SAASyG,cAAcA,CAACC,GAAQ,EAAW;EAC9C,OAAOA,GAAG,YAAYtQ,gBAAgB;AAC1C","ignoreList":[]}
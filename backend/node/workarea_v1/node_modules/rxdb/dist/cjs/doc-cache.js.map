{"version":3,"file":"doc-cache.js","names":["_index2","require","_overwritable","_rxChangeEvent","DocumentCache","exports","primaryPath","changes$","documentCreator","cacheItemByDocId","Map","registry","FinalizationRegistry","docMeta","docId","cacheItem","get","delete","revisionHeight","size","undefined","subscribe","changeEvent","documentId","documentData","getDocumentDataOfRxChangeEvent","_proto","prototype","getLatestDocumentData","getFromMapOrThrow","getLatestDocumentDataIfExists","_createClass2","default","key","fn","getCachedRxDocumentMonad","overwriteGetterForCaching","doc","docCache","deepFreezeWhenDevMode","overwritable","docsData","ret","Array","length","registryTasks","index","docData","getHeightOfRevision","_rev","byRev","cachedRxDocumentWeakRef","set","cachedRxDocument","deref","createWeakRefWithFallback","push","requestIdlePromiseNoQueue","then","register","primary","revision","mapDocumentsDataToCacheDocs","getCachedRxDocuments","HAS_WEAK_REF","WeakRef","createWeakRef","createWeakRefFallback","obj"],"sources":["../../src/doc-cache.ts"],"sourcesContent":["import type {\n    RxChangeEvent,\n    RxDocument,\n    RxDocumentData\n} from './types/index.d.ts';\nimport {\n    getFromMapOrThrow,\n    getHeightOfRevision,\n    overwriteGetterForCaching,\n    requestIdlePromiseNoQueue\n} from './plugins/utils/index.ts';\nimport {\n    overwritable\n} from './overwritable.ts';\nimport { getDocumentDataOfRxChangeEvent } from './rx-change-event.ts';\nimport { Observable } from 'rxjs';\n\n/**\n * Because we have to create many cache items,\n * we use an array instead of an object with properties\n * for better performance and less memory usage.\n * @link https://stackoverflow.com/questions/17295056/array-vs-object-efficiency-in-javascript\n */\ndeclare type CacheItem<RxDocType, OrmMethods> = [\n    /**\n     * Store the different document states of time\n     * based on their revision height.\n     * We store WeakRefs so that we can later clean up\n     * document states that are no longer needed.\n     */\n    Map<number, WeakRef<RxDocument<RxDocType, OrmMethods>>>,\n\n    /**\n     * Store the latest known document state.\n     * As long as any state of the document is in the cache,\n     * we observe the changestream and update the latestDoc accordingly.\n     * This makes it easier to optimize performance on other parts\n     * because for each known document we can always get the current state\n     * in the storage.\n     * Also it makes it possible to call RxDocument.latest() in a non-async way\n     * to retrieve the latest document state or to observe$ some property.\n     *\n     * To not prevent the whole cacheItem from being garbage collected,\n     * we store only the document data here, but not the RxDocument.\n     */\n    RxDocumentData<RxDocType>\n];\n\n\n/**\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n */\ndeclare type FinalizationRegistryValue = {\n    docId: string;\n    revisionHeight: number;\n};\n\n/**\n * The DocumentCache stores RxDocument objects\n * by their primary key and revision.\n * This is useful on client side applications where\n * it is not known how much memory can be used, so\n * we de-duplicate RxDocument states to save memory.\n * To not fill up the memory with old document states, the DocumentCache\n * only contains weak references to the RxDocuments themself.\n * @link https://caniuse.com/?search=weakref\n */\nexport class DocumentCache<RxDocType, OrmMethods> {\n    public cacheItemByDocId = new Map<string, CacheItem<RxDocType, OrmMethods>>();\n\n    /**\n     * Some JavaScript runtimes like QuickJS,\n     * so not have a FinalizationRegistry or WeakRef.\n     * Therefore we need a workaround which might waste a lot of memory,\n     * but at least works.\n     */\n    public readonly registry?: FinalizationRegistry<FinalizationRegistryValue> = typeof FinalizationRegistry === 'function' ?\n        new FinalizationRegistry<FinalizationRegistryValue>(docMeta => {\n            const docId = docMeta.docId;\n            const cacheItem = this.cacheItemByDocId.get(docId);\n            if (cacheItem) {\n                cacheItem[0].delete(docMeta.revisionHeight);\n                if (cacheItem[0].size === 0) {\n                    /**\n                     * No state of the document is cached anymore,\n                     * so we can clean up.\n                     */\n                    this.cacheItemByDocId.delete(docId);\n                }\n            }\n        }) :\n        undefined;\n\n    constructor(\n        public readonly primaryPath: string,\n        public readonly changes$: Observable<RxChangeEvent<RxDocType>>,\n        /**\n         * A method that can create a RxDocument by the given document data.\n         */\n        public documentCreator: (docData: RxDocumentData<RxDocType>) => RxDocument<RxDocType, OrmMethods>\n    ) {\n        changes$.subscribe(changeEvent => {\n            const docId = changeEvent.documentId;\n            const cacheItem = this.cacheItemByDocId.get(docId);\n            if (cacheItem) {\n                const documentData = getDocumentDataOfRxChangeEvent(changeEvent);\n                cacheItem[1] = documentData;\n            }\n        });\n    }\n\n    /**\n     * Get the RxDocument from the cache\n     * and create a new one if not exits before.\n     * @overwrites itself with the actual function\n     * because this is @performance relevant.\n     * It is called on each document row for each write and read.\n     */\n    get getCachedRxDocuments(): (docsData: RxDocumentData<RxDocType>[]) => RxDocument<RxDocType, OrmMethods>[] {\n        const fn = getCachedRxDocumentMonad(this);\n        return overwriteGetterForCaching(\n            this,\n            'getCachedRxDocuments',\n            fn\n        );\n    }\n\n    get getCachedRxDocument(): (docData: RxDocumentData<RxDocType>) => RxDocument<RxDocType, OrmMethods> {\n        const fn = getCachedRxDocumentMonad(this);\n        return overwriteGetterForCaching(\n            this,\n            'getCachedRxDocument',\n            doc => fn([doc])[0]\n        );\n    }\n\n    /**\n     * Throws if not exists\n     */\n    public getLatestDocumentData(docId: string): RxDocumentData<RxDocType> {\n        const cacheItem = getFromMapOrThrow(this.cacheItemByDocId, docId);\n        return cacheItem[1];\n    }\n\n    public getLatestDocumentDataIfExists(docId: string): RxDocumentData<RxDocType> | undefined {\n        const cacheItem = this.cacheItemByDocId.get(docId);\n        if (cacheItem) {\n            return cacheItem[1];\n        }\n    }\n}\n\n/**\n * This function is called very very often.\n * This is likely the most important function for RxDB overall performance\n * @hotPath This is one of the most important methods for performance.\n * It is used in many places to transform the raw document data into RxDocuments.\n */\nfunction getCachedRxDocumentMonad<RxDocType, OrmMethods>(\n    docCache: DocumentCache<RxDocType, OrmMethods>\n): (docsData: RxDocumentData<RxDocType>[]) => RxDocument<RxDocType, OrmMethods>[] {\n    const primaryPath = docCache.primaryPath;\n    const cacheItemByDocId = docCache.cacheItemByDocId;\n    const registry = docCache.registry;\n    const deepFreezeWhenDevMode = overwritable.deepFreezeWhenDevMode;\n    const documentCreator = docCache.documentCreator;\n    const fn: (docsData: RxDocumentData<RxDocType>[]) => RxDocument<RxDocType, OrmMethods>[] = (docsData: RxDocumentData<RxDocType>[]) => {\n        const ret: RxDocument<RxDocType, OrmMethods>[] = new Array(docsData.length);\n        const registryTasks: RxDocument<RxDocType, OrmMethods>[] = [];\n        for (let index = 0; index < docsData.length; index++) {\n            let docData = docsData[index];\n            const docId: string = (docData as any)[primaryPath];\n            const revisionHeight = getHeightOfRevision(docData._rev);\n\n            let byRev: Map<number, WeakRef<RxDocument<RxDocType, OrmMethods>>>;\n            let cachedRxDocumentWeakRef: WeakRef<RxDocument<RxDocType, OrmMethods>> | undefined;\n            let cacheItem = cacheItemByDocId.get(docId);\n            if (!cacheItem) {\n                byRev = new Map();\n                cacheItem = [\n                    byRev,\n                    docData\n                ];\n                cacheItemByDocId.set(docId, cacheItem);\n            } else {\n                byRev = cacheItem[0];\n                cachedRxDocumentWeakRef = byRev.get(revisionHeight);\n            }\n            let cachedRxDocument = cachedRxDocumentWeakRef ? cachedRxDocumentWeakRef.deref() : undefined;\n            if (!cachedRxDocument) {\n                docData = deepFreezeWhenDevMode(docData) as any;\n                cachedRxDocument = documentCreator(docData) as RxDocument<RxDocType, OrmMethods>;\n                byRev.set(revisionHeight, createWeakRefWithFallback(cachedRxDocument));\n                if (registry) {\n                    registryTasks.push(cachedRxDocument);\n                }\n            }\n            ret[index] = cachedRxDocument;\n        }\n        if (registryTasks.length > 0 && registry) {\n            /**\n             * Calling registry.register() has shown to have\n             * really bad performance. So we add the cached documents\n             * lazily.\n             */\n            requestIdlePromiseNoQueue().then(() => {\n                for (let index = 0; index < registryTasks.length; index++) {\n                    const doc = registryTasks[index];\n                    registry.register(doc, {\n                        docId: doc.primary,\n                        revisionHeight: getHeightOfRevision(doc.revision)\n                    });\n                }\n            });\n        }\n        return ret;\n    };\n    return fn;\n}\n\nexport function mapDocumentsDataToCacheDocs<RxDocType, OrmMethods>(\n    docCache: DocumentCache<RxDocType, OrmMethods>,\n    docsData: RxDocumentData<RxDocType>[]\n) {\n    const getCachedRxDocuments = docCache.getCachedRxDocuments;\n    return getCachedRxDocuments(docsData);\n}\n\n/**\n * Fallback for JavaScript runtimes that do not support WeakRef.\n * The fallback will keep the items in cache forever,\n * but at least works.\n */\nconst HAS_WEAK_REF = typeof WeakRef === 'function';\nconst createWeakRefWithFallback = HAS_WEAK_REF ? createWeakRef : createWeakRefFallback;\nfunction createWeakRef<T extends object>(obj: T): WeakRef<T> {\n    return new WeakRef(obj) as any;\n}\nfunction createWeakRefFallback<T extends object>(obj: T): WeakRef<T> {\n    return {\n        deref() {\n            return obj;\n        }\n    } as any;\n}\n"],"mappings":"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","ignoreList":[]}